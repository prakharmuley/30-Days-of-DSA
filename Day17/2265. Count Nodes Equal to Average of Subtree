Problem Link: https://leetcode.com/contest/weekly-contest-292/problems/count-nodes-equal-to-average-of-subtree/



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int c=0;
    int mx=0;
    Map<TreeNode,Integer> mp=new HashMap<>();
     Map<TreeNode,Integer> mpp=new HashMap<>();
    public int[] fun(TreeNode root)
    {
        if(root==null) return new int[]{0,0};
        int l[]=fun(root.left);
        int r[]=fun(root.right);
        int sum=l[0]+r[0]+root.val;
        int cnt=l[1]+r[1]+1;
        if(sum/cnt==root.val) c++;
      
        return new int[]{sum,cnt};
    }
    
    public int averageOfSubtree(TreeNode root) {
        if(root==null) return 0;
        int d[]=new int[1];
        d[0]=Integer.MIN_VALUE;
        fun(root);
       
        
            return c;
    }
}
