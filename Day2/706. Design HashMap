Problem Link: https://leetcode.com/problems/design-hashmap/



public class ListNode{
   public int k;
   public int v;
    ListNode next;
    public ListNode(int k, int v)
    {
        this.k=k;
        this.v=v;
        
    }
}

class MyHashMap {

    /** Initialize your data structure here. */
   ListNode node[];
     static final int size=1009;
    public MyHashMap() {
       node=new ListNode[size];
    }
    
    /** value will always be non-negative. */
    public void put(int key, int value) {
        int h=key%size;
        ListNode cur=node[h]; 
        if(node[h]==null)
        {
            node[h]=new ListNode(key,value);
            return;
            
        }
        else
        {
          while(cur.next!=null)
          {
              if(cur.k==key)
              {
                  cur.v=value;
                  return;
              }
              cur=cur.next;
          }
            if(cur.k==key)
            {
                cur.v=value;
            }
            else
            {
                cur.next=new ListNode(key,value);
            }
        }
    }
    
    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */
    public int get(int key) {
        int h=key%size;
        ListNode nd=node[h];
        while(nd!=null)
        {
            if(nd.k==key) return nd.v;
            nd=nd.next;
                
        }
        return -1;
    }
    
    /** Removes the mapping of the specified value key if this map contains a mapping for the key */
    public void remove(int key) {
     //   ListNode temp=new ListNode();
        int h=key%size;
        if(node[h]==null) return;
            ListNode cur=node[h];
        if(node[h].k==key)
        {
            node[h]=node[h].next;
            return;
        }
            while(cur.next!=null)
            {
                if(cur.next.k==key) {cur.next=cur.next.next; return;}
                cur=cur.next;
            }
            
        
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
