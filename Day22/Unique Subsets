Problem Link: https://practice.geeksforgeeks.org/problems/subsets-1587115621/1#



// { Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    
    
	public static void main (String[] args) {
		Scanner sc = new Scanner(System.in);
		int testCases = sc.nextInt();
		for(int t=0;t<testCases;t++){
		    int n = sc.nextInt();
		    int arr[] = new int[n];
		    for(int i=0;i<n;i++){
		        arr[i] = sc.nextInt();
		    }
		    Arrays.sort(arr);
		    System.out.print("()");
		    ArrayList <ArrayList<Integer>> res = new solve().AllSubsets(arr,n);
		    for (int i = 0; i < res.size (); i++)
		    {
		        System.out.print ("(");
		        for (int j = 0; j < res.get(i).size (); j++)
		        {
		            if (j != res.get(i).size()-1)
		                System.out.print ((res.get(i)).get(j) + " ");
		            else
		                System.out.print ((res.get(i)).get(j));
		        }
		        System.out.print (")");
		      
		    }
		    System.out.println();
		}
	}
}// } Driver Code Ends


class solve
{
    //Function to find all possible unique subsets.
    public static void fun(int i, int n, int[] arr,ArrayList<Integer> al, ArrayList <ArrayList <Integer>> l)
    {
        if(!l.contains(al)&&al.size()>0)
         l.add(new ArrayList<>(al));
         
        for(int j=i;j<n;j++)
        {
            if(j!=i&&arr[j]==arr[j-1]) continue;
            al.add(arr[j]);
            fun(j+1,n,arr,al,l);
            al.remove(al.size()-1);
        }
    }
    
    public static ArrayList <ArrayList <Integer>> AllSubsets(int arr[], int n)
    {
        Arrays.sort(arr);
        ArrayList <ArrayList <Integer>> l=new ArrayList<>();
        ArrayList<Integer> al=new ArrayList<>();
       
        fun(0,n,arr,new ArrayList<>(),l);
        return l;
    }
}
