Problem Link: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/



1)
T.C - O(n)
S.C - O(n)
class Solution {
    public int findUnsortedSubarray(int[] nums) {

        int r=-1;
        int n=nums.length;
                int l=n;
        Stack<Integer> st=new Stack<>();
        if(n==1) return 0;
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty()&&nums[st.peek()]>nums[i]) 
            {
                l=Math.min(l,st.peek());
                st.pop();
            }
            st.push(i);
        }
        st.clear();
         for(int i=n-1;i>=0;i--)
        {
              while(!st.isEmpty()&&nums[st.peek()]<nums[i]) 
            {
                r=Math.max(r,st.peek());
                st.pop();
            }
            st.push(i);
        }
      
        
        
        return r==-1?0:r-l+1;
    }
}

2) T.C - O(n)
   S.C - O(1)
   
   class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int n=nums.length,i;
        int mn=Integer.MAX_VALUE;
        int mx=Integer.MIN_VALUE;
        for(i=1;i<n;i++)
        {
            if(nums[i]<nums[i-1])
                mn=Math.min(nums[i],mn);
           
        }
        for(i=n-2;i>=0;i--)
        {
            if(nums[i]>nums[i+1])
                mx=Math.max(nums[i],mx);
           
        }
        
          if(mx==Integer.MIN_VALUE&&mn==Integer.MAX_VALUE)
              return 0;
            
          int s=0,e=n-1;
        for(;s<n;s++)
        {
            if(nums[s]>mn) break;
            
        }
        for(;e>=0;e--)
        {
            if(nums[e]<mx) break;
            
        }
        return e-s+1;
    }
}
