Problem Link: https://leetcode.com/problems/shortest-unsorted-continuous-subarray/



class Solution {
    public int findUnsortedSubarray(int[] nums) {

        int r=-1;
        int n=nums.length;
                int l=n;
        Stack<Integer> st=new Stack<>();
        if(n==1) return 0;
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty()&&nums[st.peek()]>nums[i]) 
            {
                l=Math.min(l,st.peek());
                st.pop();
            }
            st.push(i);
        }
        st.clear();
         for(int i=n-1;i>=0;i--)
        {
              while(!st.isEmpty()&&nums[st.peek()]<nums[i]) 
            {
                r=Math.max(r,st.peek());
                st.pop();
            }
            st.push(i);
        }
      
        
        
        return r==-1?0:r-l+1;
    }
}
