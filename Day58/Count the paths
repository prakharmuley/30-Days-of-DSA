// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int n = Integer.parseInt(S[0]);
            int m = Integer.parseInt(S[1]);
            int s = Integer.parseInt(S[2]);
            int d = Integer.parseInt(S[3]);
            int[][] edges = new int[m][2];
            for(int i = 0; i < m; i++){
                String[] S1 = br.readLine().trim().split(" ");
                edges[i][0] = Integer.parseInt(S1[0]);
                edges[i][1] = Integer.parseInt(S1[1]);
            }
            Solution obj = new Solution();
            int ans = obj.possible_paths(edges, n, s, d);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    public void dfs(List<Integer>[] adj, int s, int d, int[] c, boolean[] v)
    {
        if(s==d)
        {
            c[0]++;
            return;
        }
        v[s]=true;
        
        for(int x: adj[s])
        {
            if(!v[x])
            {
                dfs(adj,x,d,c,v);
            }
        }
        
        v[s]=false;
    }
    public int possible_paths(int[][] edges, int n, int s, int d)
    {
        List<Integer>[] adj=new ArrayList[n];
        for(int i=0;i<n;i++) adj[i]=new ArrayList<>();
        for(int [] e: edges) adj[e[0]].add(e[1]);
        boolean v[]=new boolean[n];
        int c[]=new int[1];
        dfs(adj,s,d,c,v);
        return c[0];
        
    }
}
