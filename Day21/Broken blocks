Problem Link: https://practice.geeksforgeeks.org/problems/broken-blocks0022/1



// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S = br.readLine().trim().split(" ");
            int m = Integer.parseInt(S[0]);
            int n = Integer.parseInt(S[1]);
            int[][] matrix = new int[m][n];
            for(int i = 0; i < m; i++){
                String[] s = br.readLine().trim().split(" ");
                for(int j = 0; j < n; j++)
                    matrix[i][j] = Integer.parseInt(s[j]);
            }
            Solution obj = new Solution();
            int ans = obj.MaxGold(matrix);
            System.out.println(ans);

        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    Integer dp[][];
    public int fun(int[][] a, int i, int j)
    {
        if(i>=a.length||i<0||j>=a[0].length||j<0||a[i][j]==-1) return 0;
        if(dp[i][j]!=null) return dp[i][j];
        int u=a[i][j]+fun(a,i+1,j);
        int v=a[i][j]+fun(a,i+1,j+1);
        int w=a[i][j]+fun(a,i+1,j-1);
        return dp[i][j]=Math.max(u,Math.max(v,w));
        
    }
    public int MaxGold(int[][] a)
    {
        dp=new Integer[a.length][a[0].length];
        int ans=0;
        for(int i=0;i<a[0].length;i++)
        {
          
            ans=Math.max(ans,fun(a,0,i));
        }
        return ans;
    }
}
