Problem Link: https://practice.geeksforgeeks.org/problems/longest-path-in-a-matrix3019/1#



// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] S1 = br.readLine().trim().split(" ");
            int n  = Integer.parseInt(S1[0]);
            int m = Integer.parseInt(S1[1]);
            int[][] matrix = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S2 = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    matrix[i][j] = Integer.parseInt(S2[j]);
                }
            }
            Solution obj = new Solution();
            int ans = obj.longestIncreasingPath(matrix);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution
{
    Integer dp[][];
    public int dfs(int[][] m, int i, int j, int prev)
    {
        if(i<0||j<0||i==m.length||j==m[0].length||prev>=m[i][j]) return 0;
        if(dp[i][j]!=null) return dp[i][j];
        int cur=m[i][j];
        int a=dfs(m,i+1,j,cur);
        int b=dfs(m,i-1,j,cur);
        int c=dfs(m,i,j+1,cur);
        int d=dfs(m,i,j-1,cur);
        return dp[i][j]=1+Math.max(Math.max(a,b),Math.max(c,d));
    }
    public int longestIncreasingPath(int[][] mat)
    {
        int m=mat[0].length;
        int n=mat.length;
        int ans=0;
        dp=new Integer[n+1][m+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                ans=Math.max(ans,dfs(mat,i,j,0));
            }
        }
        return ans;
    }
}
