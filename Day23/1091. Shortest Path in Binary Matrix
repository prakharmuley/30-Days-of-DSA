Problem Link: https://leetcode.com/problems/shortest-path-in-binary-matrix/



class Solution {
  int dir[][]=new int[][]{{-1,0},{1,0},{1,1},{-1,-1},{-1,1},{1,-1},{0,-1},{0,1}};
    public int shortestPathBinaryMatrix(int[][] g) 
    {
        int n=g.length;
        if(n==1&&g[0][0]==0) return 1;    
        int cnt=1;
        
        if((g[0][0]==1)||(g[n-1][n-1]==1)) return -1;
       
             
              Queue<Pair> q=new LinkedList<>();
              q.offer(new Pair(0,0));
              while(!q.isEmpty())
               {
                 int l=q.size();
                 for(int k=0;k<l;k++)
                 {
                   Pair p=q.poll();
                   int x=p.f;
                   int y=p.s;
                 
                   for(int[] d: dir)
                   {
                       int r=x+d[0];
                       int c=y+d[1];
                       if(r>=0&&r<n&&c>=0&&c<n&&g[r][c]==0)
                       {
                          if(r==n-1&&c==n-1) return cnt+1;  
                           q.offer(new Pair(r,c));
                           g[r][c]=1;
                       }
                   }
                     
                }
              cnt+=1;
            
               }
            
    
        return -1;
    }
}
class Pair{
    int f;
    int s;
    public Pair(int f, int s)
    {
        this.f=f;
        this.s=s;
    }
}
